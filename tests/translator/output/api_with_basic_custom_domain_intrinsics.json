{
  "Conditions": {
    "C1": {
      "Fn::Equals": [
        true,
        true
      ]
    }
  },
  "Parameters": {
    "EndpointConf": {
      "Default": "REGIONAL",
      "Type": "String"
    },
    "MyDomainCert": {
      "Default": "another-api-arn",
      "Type": "String"
    },
    "MyMTLSUri": {
      "Default": "another-api-truststore-uri",
      "Type": "String"
    },
    "MyMTLSVersion": {
      "Default": "another-api-truststore-version",
      "Type": "String"
    }
  },
  "Resources": {
    "ApiGatewayDomainNamec0ed6fae34": {
      "Condition": "C1",
      "Properties": {
        "DomainName": {
          "Fn::Sub": "example-ap-southeast-1.com"
        },
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "MutualTlsAuthentication": {
          "TruststoreUri": "another-api-truststore-uri",
          "TruststoreVersion": "another-api-truststore-version"
        },
        "RegionalCertificateArn": "another-api-arn",
        "SecurityPolicy": "TLS_1_2"
      },
      "Type": "AWS::ApiGateway::DomainName"
    },
    "MyApi": {
      "Condition": "C1",
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            },
            "version": "1.0"
          },
          "openapi": "3.0.1",
          "paths": {
            "/get": {
              "Fn::If": [
                "C1",
                {
                  "put": {
                    "Fn::If": [
                      "C1",
                      {
                        "responses": {},
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "C1",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        }
      },
      "Type": "AWS::ApiGateway::RestApi"
    },
    "MyApiBasePathMapping": {
      "Condition": "C1",
      "Properties": {
        "BasePath": {
          "Fn::Sub": "ap-southeast-1-api"
        },
        "DomainName": {
          "Ref": "ApiGatewayDomainNamec0ed6fae34"
        },
        "RestApiId": {
          "Ref": "MyApi"
        },
        "Stage": {
          "Ref": "MyApiProdStage"
        }
      },
      "Type": "AWS::ApiGateway::BasePathMapping"
    },
    "MyApiDeployment651fe13005": {
      "Condition": "C1",
      "Properties": {
        "Description": "RestApi deployment id: 651fe13005fac4c7c7f2fe93b77c7ef2c6c3e746",
        "RestApiId": {
          "Ref": "MyApi"
        }
      },
      "Type": "AWS::ApiGateway::Deployment"
    },
    "MyApiProdStage": {
      "Condition": "C1",
      "Properties": {
        "DeploymentId": {
          "Ref": "MyApiDeployment651fe13005"
        },
        "RestApiId": {
          "Ref": "MyApi"
        },
        "StageName": "Prod"
      },
      "Type": "AWS::ApiGateway::Stage"
    },
    "MyFunction": {
      "Condition": "C1",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => {\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!'),\n  };\n  return response;\n};\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::Lambda::Function"
    },
    "MyFunctionApiPermissionProd": {
      "Condition": "C1",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PUT/get",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunctionImplicitGetPermissionProd": {
      "Condition": "C1",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/implicit",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "MyFunctionRole": {
      "Condition": "C1",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ServerlessRestApi": {
      "Condition": "C1",
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            },
            "version": "1.0"
          },
          "paths": {
            "/implicit": {
              "Fn::If": [
                "C1",
                {
                  "post": {
                    "Fn::If": [
                      "C1",
                      {
                        "responses": {},
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "C1",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "swagger": "2.0"
        }
      },
      "Type": "AWS::ApiGateway::RestApi"
    },
    "ServerlessRestApiDeployment43c34b4e46": {
      "Condition": "C1",
      "Properties": {
        "Description": "RestApi deployment id: 43c34b4e46d381101dd94b95856a2cea244411b4",
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "StageName": "Stage"
      },
      "Type": "AWS::ApiGateway::Deployment"
    },
    "ServerlessRestApiProdStage": {
      "Condition": "C1",
      "Properties": {
        "DeploymentId": {
          "Ref": "ServerlessRestApiDeployment43c34b4e46"
        },
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "StageName": "Prod"
      },
      "Type": "AWS::ApiGateway::Stage"
    }
  }
}
